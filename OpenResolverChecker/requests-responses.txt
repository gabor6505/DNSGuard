GET Request: /OpenResolverChecker/v1/CheckServers
CheckServersGetRequest {
    NameServerAddresses = string[] // any element must be in the format of: <hostname|ipv4_addr|ipv6_addr>[:<port>] - ipv6 addresses must be enclosed in [] if a port is specified
    QueryAddress = string (optional)
    QueryTypes = QueryType enum (optional)
}

Response:
//Id

TimestampUtc
//CheckDurationMillis

QueryAddress = string

CheckResult[] = {
    NameServerIp = string
    QueryType = QueryType enum (string) // TODO could be named queryRecordType
    
    ConnectionError = ConnectionError enum (string)
    PossibleRecursion = bool // if connectionError != None -> always true (TODO could be false or left out of response?)
}



GET Request: /OpenResolverChecker/v1/CheckServersDetailed
CheckServersGetRequest {
    NameServerAddresses = string[] // any element must be in the format of: <hostname|ipv4_addr|ipv6_addr>[:<port>] - ipv6 addresses must be enclosed in [] if a port is specified
    QueryAddress = string (optional)
    QueryTypes = QueryType enum (optional)
}

Response:
//Id

TimestampUtc
//CheckDurationMillis

QueryAddress = string

CheckResult[] = {
    NameServerIp = string
    QueryType = QueryType enum (string) // TODO could be named queryRecordType
    
    ConnectionError = ConnectionError enum (string)
    PossibleRecursion = bool // if connectionError != None -> always true (TODO could be false or left out of response?)
    
    DnsQueryResponse (only if connectionError == None) = {
        ResponseCode = DnsHeaderResponseCode enum (short/string)
        ResponseFlags = string // ushort //-> radix 16
        RecursionAvailableFlag = bool
        AnswerRecordCount = ushort
    }
}

// TODO IP ranges, same structure as above

Considerations TODO:
For IP ranges, 2 separate Requests would be best in my opinion (CheckRange & CheckRangeDetailed), this would avoid some address parsing complexity

For any response, if there are more than x results, return a UUID and the amount of results/pages so the client can request them in pages

IP Range testing could also be moved to another microservice, which handles the requests/responses and the paging;
in this case the OpenResolverChecker service should be limited to a maximum amount of checks per request